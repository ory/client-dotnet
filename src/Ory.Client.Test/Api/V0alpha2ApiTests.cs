/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.2.0-alpha.22
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Ory.Client.Client;
using Ory.Client.Api;
// uncomment below to import models
//using Ory.Client.Model;

namespace Ory.Client.Test.Api
{
    /// <summary>
    ///  Class for testing V0alpha2Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class V0alpha2ApiTests : IDisposable
    {
        private V0alpha2Api instance;

        public V0alpha2ApiTests()
        {
            instance = new V0alpha2Api();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of V0alpha2Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' V0alpha2Api
            //Assert.IsType<V0alpha2Api>(instance);
        }

        /// <summary>
        /// Test AdminAcceptOAuth2ConsentRequest
        /// </summary>
        [Fact]
        public void AdminAcceptOAuth2ConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentChallenge = null;
            //ClientAcceptOAuth2ConsentRequest clientAcceptOAuth2ConsentRequest = null;
            //var response = instance.AdminAcceptOAuth2ConsentRequest(consentChallenge, clientAcceptOAuth2ConsentRequest);
            //Assert.IsType<ClientSuccessfulOAuth2RequestResponse>(response);
        }

        /// <summary>
        /// Test AdminAcceptOAuth2LoginRequest
        /// </summary>
        [Fact]
        public void AdminAcceptOAuth2LoginRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loginChallenge = null;
            //ClientAcceptOAuth2LoginRequest clientAcceptOAuth2LoginRequest = null;
            //var response = instance.AdminAcceptOAuth2LoginRequest(loginChallenge, clientAcceptOAuth2LoginRequest);
            //Assert.IsType<ClientSuccessfulOAuth2RequestResponse>(response);
        }

        /// <summary>
        /// Test AdminAcceptOAuth2LogoutRequest
        /// </summary>
        [Fact]
        public void AdminAcceptOAuth2LogoutRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string logoutChallenge = null;
            //var response = instance.AdminAcceptOAuth2LogoutRequest(logoutChallenge);
            //Assert.IsType<ClientSuccessfulOAuth2RequestResponse>(response);
        }

        /// <summary>
        /// Test AdminCreateIdentity
        /// </summary>
        [Fact]
        public void AdminCreateIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientAdminCreateIdentityBody clientAdminCreateIdentityBody = null;
            //var response = instance.AdminCreateIdentity(clientAdminCreateIdentityBody);
            //Assert.IsType<ClientIdentity>(response);
        }

        /// <summary>
        /// Test AdminCreateJsonWebKeySet
        /// </summary>
        [Fact]
        public void AdminCreateJsonWebKeySetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //ClientAdminCreateJsonWebKeySetBody clientAdminCreateJsonWebKeySetBody = null;
            //var response = instance.AdminCreateJsonWebKeySet(set, clientAdminCreateJsonWebKeySetBody);
            //Assert.IsType<ClientJsonWebKeySet>(response);
        }

        /// <summary>
        /// Test AdminCreateOAuth2Client
        /// </summary>
        [Fact]
        public void AdminCreateOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientOAuth2Client clientOAuth2Client = null;
            //var response = instance.AdminCreateOAuth2Client(clientOAuth2Client);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test AdminCreateSelfServiceRecoveryLink
        /// </summary>
        [Fact]
        public void AdminCreateSelfServiceRecoveryLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientAdminCreateSelfServiceRecoveryLinkBody clientAdminCreateSelfServiceRecoveryLinkBody = null;
            //var response = instance.AdminCreateSelfServiceRecoveryLink(clientAdminCreateSelfServiceRecoveryLinkBody);
            //Assert.IsType<ClientSelfServiceRecoveryLink>(response);
        }

        /// <summary>
        /// Test AdminDeleteIdentity
        /// </summary>
        [Fact]
        public void AdminDeleteIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AdminDeleteIdentity(id);
        }

        /// <summary>
        /// Test AdminDeleteIdentitySessions
        /// </summary>
        [Fact]
        public void AdminDeleteIdentitySessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AdminDeleteIdentitySessions(id);
        }

        /// <summary>
        /// Test AdminDeleteJsonWebKey
        /// </summary>
        [Fact]
        public void AdminDeleteJsonWebKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //string kid = null;
            //instance.AdminDeleteJsonWebKey(set, kid);
        }

        /// <summary>
        /// Test AdminDeleteJsonWebKeySet
        /// </summary>
        [Fact]
        public void AdminDeleteJsonWebKeySetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //instance.AdminDeleteJsonWebKeySet(set);
        }

        /// <summary>
        /// Test AdminDeleteOAuth2Client
        /// </summary>
        [Fact]
        public void AdminDeleteOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AdminDeleteOAuth2Client(id);
        }

        /// <summary>
        /// Test AdminDeleteOAuth2Token
        /// </summary>
        [Fact]
        public void AdminDeleteOAuth2TokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //instance.AdminDeleteOAuth2Token(clientId);
        }

        /// <summary>
        /// Test AdminDeleteTrustedOAuth2JwtGrantIssuer
        /// </summary>
        [Fact]
        public void AdminDeleteTrustedOAuth2JwtGrantIssuerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AdminDeleteTrustedOAuth2JwtGrantIssuer(id);
        }

        /// <summary>
        /// Test AdminExtendSession
        /// </summary>
        [Fact]
        public void AdminExtendSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AdminExtendSession(id);
            //Assert.IsType<ClientSession>(response);
        }

        /// <summary>
        /// Test AdminGetIdentity
        /// </summary>
        [Fact]
        public void AdminGetIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> includeCredential = null;
            //var response = instance.AdminGetIdentity(id, includeCredential);
            //Assert.IsType<ClientIdentity>(response);
        }

        /// <summary>
        /// Test AdminGetJsonWebKey
        /// </summary>
        [Fact]
        public void AdminGetJsonWebKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //string kid = null;
            //var response = instance.AdminGetJsonWebKey(set, kid);
            //Assert.IsType<ClientJsonWebKeySet>(response);
        }

        /// <summary>
        /// Test AdminGetJsonWebKeySet
        /// </summary>
        [Fact]
        public void AdminGetJsonWebKeySetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //var response = instance.AdminGetJsonWebKeySet(set);
            //Assert.IsType<ClientJsonWebKeySet>(response);
        }

        /// <summary>
        /// Test AdminGetOAuth2Client
        /// </summary>
        [Fact]
        public void AdminGetOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AdminGetOAuth2Client(id);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test AdminGetOAuth2ConsentRequest
        /// </summary>
        [Fact]
        public void AdminGetOAuth2ConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentChallenge = null;
            //var response = instance.AdminGetOAuth2ConsentRequest(consentChallenge);
            //Assert.IsType<ClientOAuth2ConsentRequest>(response);
        }

        /// <summary>
        /// Test AdminGetOAuth2LoginRequest
        /// </summary>
        [Fact]
        public void AdminGetOAuth2LoginRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loginChallenge = null;
            //var response = instance.AdminGetOAuth2LoginRequest(loginChallenge);
            //Assert.IsType<ClientOAuth2LoginRequest>(response);
        }

        /// <summary>
        /// Test AdminGetOAuth2LogoutRequest
        /// </summary>
        [Fact]
        public void AdminGetOAuth2LogoutRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string logoutChallenge = null;
            //var response = instance.AdminGetOAuth2LogoutRequest(logoutChallenge);
            //Assert.IsType<ClientOAuth2LogoutRequest>(response);
        }

        /// <summary>
        /// Test AdminGetTrustedOAuth2JwtGrantIssuer
        /// </summary>
        [Fact]
        public void AdminGetTrustedOAuth2JwtGrantIssuerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AdminGetTrustedOAuth2JwtGrantIssuer(id);
            //Assert.IsType<ClientTrustedOAuth2JwtGrantIssuer>(response);
        }

        /// <summary>
        /// Test AdminIntrospectOAuth2Token
        /// </summary>
        [Fact]
        public void AdminIntrospectOAuth2TokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string scope = null;
            //var response = instance.AdminIntrospectOAuth2Token(token, scope);
            //Assert.IsType<ClientIntrospectedOAuth2Token>(response);
        }

        /// <summary>
        /// Test AdminListIdentities
        /// </summary>
        [Fact]
        public void AdminListIdentitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? perPage = null;
            //long? page = null;
            //var response = instance.AdminListIdentities(perPage, page);
            //Assert.IsType<List<ClientIdentity>>(response);
        }

        /// <summary>
        /// Test AdminListIdentitySessions
        /// </summary>
        [Fact]
        public void AdminListIdentitySessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //long? perPage = null;
            //long? page = null;
            //bool? active = null;
            //var response = instance.AdminListIdentitySessions(id, perPage, page, active);
            //Assert.IsType<List<ClientSession>>(response);
        }

        /// <summary>
        /// Test AdminListOAuth2Clients
        /// </summary>
        [Fact]
        public void AdminListOAuth2ClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? pageSize = null;
            //string pageToken = null;
            //string clientName = null;
            //string owner = null;
            //var response = instance.AdminListOAuth2Clients(pageSize, pageToken, clientName, owner);
            //Assert.IsType<List<ClientOAuth2Client>>(response);
        }

        /// <summary>
        /// Test AdminListOAuth2SubjectConsentSessions
        /// </summary>
        [Fact]
        public void AdminListOAuth2SubjectConsentSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subject = null;
            //string link = null;
            //string xTotalCount = null;
            //var response = instance.AdminListOAuth2SubjectConsentSessions(subject, link, xTotalCount);
            //Assert.IsType<List<ClientPreviousOAuth2ConsentSession>>(response);
        }

        /// <summary>
        /// Test AdminListTrustedOAuth2JwtGrantIssuers
        /// </summary>
        [Fact]
        public void AdminListTrustedOAuth2JwtGrantIssuersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? maxItems = null;
            //long? defaultItems = null;
            //string issuer = null;
            //long? limit = null;
            //long? offset = null;
            //var response = instance.AdminListTrustedOAuth2JwtGrantIssuers(maxItems, defaultItems, issuer, limit, offset);
            //Assert.IsType<List<ClientTrustedOAuth2JwtGrantIssuer>>(response);
        }

        /// <summary>
        /// Test AdminPatchIdentity
        /// </summary>
        [Fact]
        public void AdminPatchIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ClientJsonPatch> clientJsonPatch = null;
            //var response = instance.AdminPatchIdentity(id, clientJsonPatch);
            //Assert.IsType<ClientIdentity>(response);
        }

        /// <summary>
        /// Test AdminPatchOAuth2Client
        /// </summary>
        [Fact]
        public void AdminPatchOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ClientJsonPatch> clientJsonPatch = null;
            //var response = instance.AdminPatchOAuth2Client(id, clientJsonPatch);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test AdminRejectOAuth2ConsentRequest
        /// </summary>
        [Fact]
        public void AdminRejectOAuth2ConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentChallenge = null;
            //ClientRejectOAuth2Request clientRejectOAuth2Request = null;
            //var response = instance.AdminRejectOAuth2ConsentRequest(consentChallenge, clientRejectOAuth2Request);
            //Assert.IsType<ClientSuccessfulOAuth2RequestResponse>(response);
        }

        /// <summary>
        /// Test AdminRejectOAuth2LoginRequest
        /// </summary>
        [Fact]
        public void AdminRejectOAuth2LoginRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loginChallenge = null;
            //ClientRejectOAuth2Request clientRejectOAuth2Request = null;
            //var response = instance.AdminRejectOAuth2LoginRequest(loginChallenge, clientRejectOAuth2Request);
            //Assert.IsType<ClientSuccessfulOAuth2RequestResponse>(response);
        }

        /// <summary>
        /// Test AdminRejectOAuth2LogoutRequest
        /// </summary>
        [Fact]
        public void AdminRejectOAuth2LogoutRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string logoutChallenge = null;
            //ClientRejectOAuth2Request clientRejectOAuth2Request = null;
            //instance.AdminRejectOAuth2LogoutRequest(logoutChallenge, clientRejectOAuth2Request);
        }

        /// <summary>
        /// Test AdminRevokeOAuth2ConsentSessions
        /// </summary>
        [Fact]
        public void AdminRevokeOAuth2ConsentSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subject = null;
            //string _client = null;
            //bool? all = null;
            //instance.AdminRevokeOAuth2ConsentSessions(subject, _client, all);
        }

        /// <summary>
        /// Test AdminRevokeOAuth2LoginSessions
        /// </summary>
        [Fact]
        public void AdminRevokeOAuth2LoginSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subject = null;
            //instance.AdminRevokeOAuth2LoginSessions(subject);
        }

        /// <summary>
        /// Test AdminTrustOAuth2JwtGrantIssuer
        /// </summary>
        [Fact]
        public void AdminTrustOAuth2JwtGrantIssuerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientAdminTrustOAuth2JwtGrantIssuerBody clientAdminTrustOAuth2JwtGrantIssuerBody = null;
            //var response = instance.AdminTrustOAuth2JwtGrantIssuer(clientAdminTrustOAuth2JwtGrantIssuerBody);
            //Assert.IsType<ClientTrustedOAuth2JwtGrantIssuer>(response);
        }

        /// <summary>
        /// Test AdminUpdateIdentity
        /// </summary>
        [Fact]
        public void AdminUpdateIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ClientAdminUpdateIdentityBody clientAdminUpdateIdentityBody = null;
            //var response = instance.AdminUpdateIdentity(id, clientAdminUpdateIdentityBody);
            //Assert.IsType<ClientIdentity>(response);
        }

        /// <summary>
        /// Test AdminUpdateJsonWebKey
        /// </summary>
        [Fact]
        public void AdminUpdateJsonWebKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //string kid = null;
            //ClientJsonWebKey clientJsonWebKey = null;
            //var response = instance.AdminUpdateJsonWebKey(set, kid, clientJsonWebKey);
            //Assert.IsType<ClientJsonWebKey>(response);
        }

        /// <summary>
        /// Test AdminUpdateJsonWebKeySet
        /// </summary>
        [Fact]
        public void AdminUpdateJsonWebKeySetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //ClientJsonWebKeySet clientJsonWebKeySet = null;
            //var response = instance.AdminUpdateJsonWebKeySet(set, clientJsonWebKeySet);
            //Assert.IsType<ClientJsonWebKeySet>(response);
        }

        /// <summary>
        /// Test AdminUpdateOAuth2Client
        /// </summary>
        [Fact]
        public void AdminUpdateOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ClientOAuth2Client clientOAuth2Client = null;
            //var response = instance.AdminUpdateOAuth2Client(id, clientOAuth2Client);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Fact]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientCreateProjectBody clientCreateProjectBody = null;
            //var response = instance.CreateProject(clientCreateProjectBody);
            //Assert.IsType<ClientProject>(response);
        }

        /// <summary>
        /// Test CreateSelfServiceLogoutFlowUrlForBrowsers
        /// </summary>
        [Fact]
        public void CreateSelfServiceLogoutFlowUrlForBrowsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cookie = null;
            //var response = instance.CreateSelfServiceLogoutFlowUrlForBrowsers(cookie);
            //Assert.IsType<ClientSelfServiceLogoutUrl>(response);
        }

        /// <summary>
        /// Test DiscoverJsonWebKeys
        /// </summary>
        [Fact]
        public void DiscoverJsonWebKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DiscoverJsonWebKeys();
            //Assert.IsType<ClientJsonWebKeySet>(response);
        }

        /// <summary>
        /// Test DiscoverOidcConfiguration
        /// </summary>
        [Fact]
        public void DiscoverOidcConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DiscoverOidcConfiguration();
            //Assert.IsType<ClientOidcConfiguration>(response);
        }

        /// <summary>
        /// Test DynamicClientRegistrationCreateOAuth2Client
        /// </summary>
        [Fact]
        public void DynamicClientRegistrationCreateOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientOAuth2Client clientOAuth2Client = null;
            //var response = instance.DynamicClientRegistrationCreateOAuth2Client(clientOAuth2Client);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test DynamicClientRegistrationDeleteOAuth2Client
        /// </summary>
        [Fact]
        public void DynamicClientRegistrationDeleteOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DynamicClientRegistrationDeleteOAuth2Client(id);
        }

        /// <summary>
        /// Test DynamicClientRegistrationGetOAuth2Client
        /// </summary>
        [Fact]
        public void DynamicClientRegistrationGetOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DynamicClientRegistrationGetOAuth2Client(id);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test DynamicClientRegistrationUpdateOAuth2Client
        /// </summary>
        [Fact]
        public void DynamicClientRegistrationUpdateOAuth2ClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ClientOAuth2Client clientOAuth2Client = null;
            //var response = instance.DynamicClientRegistrationUpdateOAuth2Client(id, clientOAuth2Client);
            //Assert.IsType<ClientOAuth2Client>(response);
        }

        /// <summary>
        /// Test GetIdentitySchema
        /// </summary>
        [Fact]
        public void GetIdentitySchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetIdentitySchema(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetOidcUserInfo
        /// </summary>
        [Fact]
        public void GetOidcUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOidcUserInfo();
            //Assert.IsType<ClientOidcUserInfo>(response);
        }

        /// <summary>
        /// Test GetProject
        /// </summary>
        [Fact]
        public void GetProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.GetProject(projectId);
            //Assert.IsType<ClientProject>(response);
        }

        /// <summary>
        /// Test GetProjectMembers
        /// </summary>
        [Fact]
        public void GetProjectMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.GetProjectMembers(projectId);
            //Assert.IsType<List<ClientCloudAccount>>(response);
        }

        /// <summary>
        /// Test GetSelfServiceError
        /// </summary>
        [Fact]
        public void GetSelfServiceErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSelfServiceError(id);
            //Assert.IsType<ClientSelfServiceError>(response);
        }

        /// <summary>
        /// Test GetSelfServiceLoginFlow
        /// </summary>
        [Fact]
        public void GetSelfServiceLoginFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cookie = null;
            //var response = instance.GetSelfServiceLoginFlow(id, cookie);
            //Assert.IsType<ClientSelfServiceLoginFlow>(response);
        }

        /// <summary>
        /// Test GetSelfServiceRecoveryFlow
        /// </summary>
        [Fact]
        public void GetSelfServiceRecoveryFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cookie = null;
            //var response = instance.GetSelfServiceRecoveryFlow(id, cookie);
            //Assert.IsType<ClientSelfServiceRecoveryFlow>(response);
        }

        /// <summary>
        /// Test GetSelfServiceRegistrationFlow
        /// </summary>
        [Fact]
        public void GetSelfServiceRegistrationFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cookie = null;
            //var response = instance.GetSelfServiceRegistrationFlow(id, cookie);
            //Assert.IsType<ClientSelfServiceRegistrationFlow>(response);
        }

        /// <summary>
        /// Test GetSelfServiceSettingsFlow
        /// </summary>
        [Fact]
        public void GetSelfServiceSettingsFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string xSessionToken = null;
            //string cookie = null;
            //var response = instance.GetSelfServiceSettingsFlow(id, xSessionToken, cookie);
            //Assert.IsType<ClientSelfServiceSettingsFlow>(response);
        }

        /// <summary>
        /// Test GetSelfServiceVerificationFlow
        /// </summary>
        [Fact]
        public void GetSelfServiceVerificationFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cookie = null;
            //var response = instance.GetSelfServiceVerificationFlow(id, cookie);
            //Assert.IsType<ClientSelfServiceVerificationFlow>(response);
        }

        /// <summary>
        /// Test GetWebAuthnJavaScript
        /// </summary>
        [Fact]
        public void GetWebAuthnJavaScriptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWebAuthnJavaScript();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceLoginFlowForBrowsers
        /// </summary>
        [Fact]
        public void InitializeSelfServiceLoginFlowForBrowsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? refresh = null;
            //string aal = null;
            //string returnTo = null;
            //var response = instance.InitializeSelfServiceLoginFlowForBrowsers(refresh, aal, returnTo);
            //Assert.IsType<ClientSelfServiceLoginFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceLoginFlowWithoutBrowser
        /// </summary>
        [Fact]
        public void InitializeSelfServiceLoginFlowWithoutBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? refresh = null;
            //string aal = null;
            //string xSessionToken = null;
            //var response = instance.InitializeSelfServiceLoginFlowWithoutBrowser(refresh, aal, xSessionToken);
            //Assert.IsType<ClientSelfServiceLoginFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceRecoveryFlowForBrowsers
        /// </summary>
        [Fact]
        public void InitializeSelfServiceRecoveryFlowForBrowsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnTo = null;
            //var response = instance.InitializeSelfServiceRecoveryFlowForBrowsers(returnTo);
            //Assert.IsType<ClientSelfServiceRecoveryFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceRecoveryFlowWithoutBrowser
        /// </summary>
        [Fact]
        public void InitializeSelfServiceRecoveryFlowWithoutBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InitializeSelfServiceRecoveryFlowWithoutBrowser();
            //Assert.IsType<ClientSelfServiceRecoveryFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceRegistrationFlowForBrowsers
        /// </summary>
        [Fact]
        public void InitializeSelfServiceRegistrationFlowForBrowsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnTo = null;
            //var response = instance.InitializeSelfServiceRegistrationFlowForBrowsers(returnTo);
            //Assert.IsType<ClientSelfServiceRegistrationFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceRegistrationFlowWithoutBrowser
        /// </summary>
        [Fact]
        public void InitializeSelfServiceRegistrationFlowWithoutBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InitializeSelfServiceRegistrationFlowWithoutBrowser();
            //Assert.IsType<ClientSelfServiceRegistrationFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceSettingsFlowForBrowsers
        /// </summary>
        [Fact]
        public void InitializeSelfServiceSettingsFlowForBrowsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnTo = null;
            //var response = instance.InitializeSelfServiceSettingsFlowForBrowsers(returnTo);
            //Assert.IsType<ClientSelfServiceSettingsFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceSettingsFlowWithoutBrowser
        /// </summary>
        [Fact]
        public void InitializeSelfServiceSettingsFlowWithoutBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSessionToken = null;
            //var response = instance.InitializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken);
            //Assert.IsType<ClientSelfServiceSettingsFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceVerificationFlowForBrowsers
        /// </summary>
        [Fact]
        public void InitializeSelfServiceVerificationFlowForBrowsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnTo = null;
            //var response = instance.InitializeSelfServiceVerificationFlowForBrowsers(returnTo);
            //Assert.IsType<ClientSelfServiceVerificationFlow>(response);
        }

        /// <summary>
        /// Test InitializeSelfServiceVerificationFlowWithoutBrowser
        /// </summary>
        [Fact]
        public void InitializeSelfServiceVerificationFlowWithoutBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InitializeSelfServiceVerificationFlowWithoutBrowser();
            //Assert.IsType<ClientSelfServiceVerificationFlow>(response);
        }

        /// <summary>
        /// Test ListIdentitySchemas
        /// </summary>
        [Fact]
        public void ListIdentitySchemasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? perPage = null;
            //long? page = null;
            //var response = instance.ListIdentitySchemas(perPage, page);
            //Assert.IsType<List<ClientIdentitySchemaContainer>>(response);
        }

        /// <summary>
        /// Test ListProjects
        /// </summary>
        [Fact]
        public void ListProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListProjects();
            //Assert.IsType<List<ClientProjectMetadata>>(response);
        }

        /// <summary>
        /// Test ListSessions
        /// </summary>
        [Fact]
        public void ListSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSessionToken = null;
            //string cookie = null;
            //long? perPage = null;
            //long? page = null;
            //var response = instance.ListSessions(xSessionToken, cookie, perPage, page);
            //Assert.IsType<List<ClientSession>>(response);
        }

        /// <summary>
        /// Test PatchProject
        /// </summary>
        [Fact]
        public void PatchProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //List<ClientJsonPatch> clientJsonPatch = null;
            //var response = instance.PatchProject(projectId, clientJsonPatch);
            //Assert.IsType<ClientSuccessfulProjectUpdate>(response);
        }

        /// <summary>
        /// Test PerformOAuth2AuthorizationFlow
        /// </summary>
        [Fact]
        public void PerformOAuth2AuthorizationFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PerformOAuth2AuthorizationFlow();
            //Assert.IsType<ClientOAuth2ApiError>(response);
        }

        /// <summary>
        /// Test PerformOAuth2TokenFlow
        /// </summary>
        [Fact]
        public void PerformOAuth2TokenFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string grantType = null;
            //string clientId = null;
            //string code = null;
            //string redirectUri = null;
            //string refreshToken = null;
            //var response = instance.PerformOAuth2TokenFlow(grantType, clientId, code, redirectUri, refreshToken);
            //Assert.IsType<ClientOAuth2TokenResponse>(response);
        }

        /// <summary>
        /// Test PerformOidcFrontOrBackChannelLogout
        /// </summary>
        [Fact]
        public void PerformOidcFrontOrBackChannelLogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PerformOidcFrontOrBackChannelLogout();
        }

        /// <summary>
        /// Test PurgeProject
        /// </summary>
        [Fact]
        public void PurgeProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //instance.PurgeProject(projectId);
        }

        /// <summary>
        /// Test RemoveProjectMember
        /// </summary>
        [Fact]
        public void RemoveProjectMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string memberId = null;
            //instance.RemoveProjectMember(projectId, memberId);
        }

        /// <summary>
        /// Test RevokeOAuth2Token
        /// </summary>
        [Fact]
        public void RevokeOAuth2TokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //instance.RevokeOAuth2Token(token);
        }

        /// <summary>
        /// Test RevokeSession
        /// </summary>
        [Fact]
        public void RevokeSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.RevokeSession(id);
        }

        /// <summary>
        /// Test RevokeSessions
        /// </summary>
        [Fact]
        public void RevokeSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSessionToken = null;
            //string cookie = null;
            //var response = instance.RevokeSessions(xSessionToken, cookie);
            //Assert.IsType<ClientRevokedSessions>(response);
        }

        /// <summary>
        /// Test SubmitSelfServiceLoginFlow
        /// </summary>
        [Fact]
        public void SubmitSelfServiceLoginFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //ClientSubmitSelfServiceLoginFlowBody clientSubmitSelfServiceLoginFlowBody = null;
            //string xSessionToken = null;
            //string cookie = null;
            //var response = instance.SubmitSelfServiceLoginFlow(flow, clientSubmitSelfServiceLoginFlowBody, xSessionToken, cookie);
            //Assert.IsType<ClientSuccessfulSelfServiceLoginWithoutBrowser>(response);
        }

        /// <summary>
        /// Test SubmitSelfServiceLogoutFlow
        /// </summary>
        [Fact]
        public void SubmitSelfServiceLogoutFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string returnTo = null;
            //instance.SubmitSelfServiceLogoutFlow(token, returnTo);
        }

        /// <summary>
        /// Test SubmitSelfServiceLogoutFlowWithoutBrowser
        /// </summary>
        [Fact]
        public void SubmitSelfServiceLogoutFlowWithoutBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientSubmitSelfServiceLogoutFlowWithoutBrowserBody clientSubmitSelfServiceLogoutFlowWithoutBrowserBody = null;
            //instance.SubmitSelfServiceLogoutFlowWithoutBrowser(clientSubmitSelfServiceLogoutFlowWithoutBrowserBody);
        }

        /// <summary>
        /// Test SubmitSelfServiceRecoveryFlow
        /// </summary>
        [Fact]
        public void SubmitSelfServiceRecoveryFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //ClientSubmitSelfServiceRecoveryFlowBody clientSubmitSelfServiceRecoveryFlowBody = null;
            //string token = null;
            //string cookie = null;
            //var response = instance.SubmitSelfServiceRecoveryFlow(flow, clientSubmitSelfServiceRecoveryFlowBody, token, cookie);
            //Assert.IsType<ClientSelfServiceRecoveryFlow>(response);
        }

        /// <summary>
        /// Test SubmitSelfServiceRegistrationFlow
        /// </summary>
        [Fact]
        public void SubmitSelfServiceRegistrationFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //ClientSubmitSelfServiceRegistrationFlowBody clientSubmitSelfServiceRegistrationFlowBody = null;
            //string cookie = null;
            //var response = instance.SubmitSelfServiceRegistrationFlow(flow, clientSubmitSelfServiceRegistrationFlowBody, cookie);
            //Assert.IsType<ClientSuccessfulSelfServiceRegistrationWithoutBrowser>(response);
        }

        /// <summary>
        /// Test SubmitSelfServiceSettingsFlow
        /// </summary>
        [Fact]
        public void SubmitSelfServiceSettingsFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //ClientSubmitSelfServiceSettingsFlowBody clientSubmitSelfServiceSettingsFlowBody = null;
            //string xSessionToken = null;
            //string cookie = null;
            //var response = instance.SubmitSelfServiceSettingsFlow(flow, clientSubmitSelfServiceSettingsFlowBody, xSessionToken, cookie);
            //Assert.IsType<ClientSelfServiceSettingsFlow>(response);
        }

        /// <summary>
        /// Test SubmitSelfServiceVerificationFlow
        /// </summary>
        [Fact]
        public void SubmitSelfServiceVerificationFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //ClientSubmitSelfServiceVerificationFlowBody clientSubmitSelfServiceVerificationFlowBody = null;
            //string token = null;
            //string cookie = null;
            //var response = instance.SubmitSelfServiceVerificationFlow(flow, clientSubmitSelfServiceVerificationFlowBody, token, cookie);
            //Assert.IsType<ClientSelfServiceVerificationFlow>(response);
        }

        /// <summary>
        /// Test ToSession
        /// </summary>
        [Fact]
        public void ToSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSessionToken = null;
            //string cookie = null;
            //var response = instance.ToSession(xSessionToken, cookie);
            //Assert.IsType<ClientSession>(response);
        }

        /// <summary>
        /// Test UpdateProject
        /// </summary>
        [Fact]
        public void UpdateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //ClientUpdateProject clientUpdateProject = null;
            //var response = instance.UpdateProject(projectId, clientUpdateProject);
            //Assert.IsType<ClientSuccessfulProjectUpdate>(response);
        }
    }
}
